<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_res</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image init
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process the resource

image_index = 0;

// Check storage
if(global.mat[type] &lt; global.process_max) {
    // Check needs of each requirement
    for(var i=0; i&lt;array_length_2d(global.mat_req_need,type); i++) {
        // Check if type current &lt; need
        if(global.mat_req_cur[type,i] &lt; global.mat_req_need[type,i]) {
            // Check if have enough resources
            if(global.res[global.mat_req_type[type,i]] &gt; 0) {
                global.mat_req_cur[type,i] += 1;
                global.res[global.mat_req_type[type,i]] -= 1;
            }
            exit;
        }
    }
    // If all needs are met, add material and reset current build
    global.mat[type] += 1;
    for(var i=0; i&lt;array_length_2d(global.mat_req_cur,type); i++) {
        global.mat_req_cur[type,i] = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 1;

alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_font(fnt_default);
draw_set_colour(c_white);

var pad = 4;

// Value
draw_set_halign(fa_left);
draw_set_valign(fa_bottom);
draw_text(x-sprite_width/2+pad,y+sprite_height/2,global.mat[type]);

// Label
draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_text(x+sprite_width/2-pad,y+sprite_height/2,global.mat_lbl[type]);

// Requirements
draw_set_font(fnt_small);
draw_set_valign(fa_middle);

var req_total = 0;
var rect_index = 0;

for(var i=0; i&lt;array_length_2d(global.mat_req_type,type); i++) {
    req_total += global.mat_req_need[type,i];
}
var height = 20;
var width = sprite_width/req_total;
var need_mats = false;
var need_checked = false;

for(var i=0; i&lt;array_length_2d(global.mat_req_type,type); i++) {
    var req_type = global.mat_req_type[type,i];
    var label = global.res_lbl[req_type];
    var current = global.mat_req_cur[type,i];
    var need = global.mat_req_need[type,i];
    var have = global.res[req_type];
    
    draw_set_colour(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(x-sprite_width/2+pad,y-sprite_height/2+i*font_get_size(fnt_default),label+"  "+string(current)+"/"+string(need));
    draw_set_halign(fa_right);
    draw_text(x+sprite_width/2-pad,y-sprite_height/2+i*font_get_size(fnt_default),string(have));
    
    // Graphical build indicater
    for(var w=0; w&lt;need; w++) {
        if(w &lt; current) {
            draw_set_colour(c_green);
        } else if(w &lt; have + current) {
            draw_set_colour(c_blue);
            if(!need_checked) {
                need_mats = false;
                need_checked = true;
            }
        } else {
            draw_set_colour(c_red);
            if(!need_checked) {
                need_mats = true;
                need_checked = true;
            }
        }
        draw_rectangle(x-sprite_width/2+width*rect_index,y-sprite_height/2-height,x-sprite_width/2+width*rect_index+width,y-sprite_height/2,false);
        rect_index++;
    }
}

// Build-Need-Max-Complete label
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_bottom);
if(global.mat[type] == global.process_max) {
    draw_text(x,y-sprite_height/2,"ITEM MAX");
} else if(need_mats) {
    draw_text(x,y-sprite_height/2,"NEED MAT");
} else if(need_checked) {
    draw_text(x,y-sprite_height/2,"BUILD");
} else {
    draw_text(x,y-sprite_height/2,"COMPLETE");
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
